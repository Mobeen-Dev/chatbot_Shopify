<script>
  class IsolatedAIChat extends HTMLElement {
      constructor() {
          super();
          
          // Create shadow root for complete isolation
          this.attachShadow({ mode: 'open' });
          
          // Initialize the widget
          this.init();
      }
      
      init() {
          // Create the widget structure with all your original HTML and styles
          this.shadowRoot.innerHTML = `
              <style>
                  /* All your original styles, now completely isolated */
                  :host {
                      position: fixed;
                      bottom: 0;
                      right: 0;
                      z-index: 2147483647;
                      font-family: 'Roboto', 'Segoe UI', system-ui, sans-serif;
                  }

                  * {
                      margin: 0;
                      padding: 0;
                      box-sizing: border-box;
                  }

                  .chat-button {
                      position: fixed;
                      bottom: 24px;
                      right: 24px;
                      width: 56px;
                      height: 56px;
                      background: #4caf50;
                      border: none;
                      border-radius: 16px;
                      cursor: pointer;
                      box-shadow: 0 3px 14px 2px rgba(76, 175, 80, 0.3);
                      transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
                      z-index: 1000;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                  }

                  .chat-button:hover {
                      transform: scale(1.05);
                      box-shadow: 0 6px 20px 4px rgba(76, 175, 80, 0.4);
                      background: #66bb6a;
                  }

                  .chat-button:active {
                      transform: scale(0.95);
                  }

                  .chat-button svg {
                      width: 24px;
                      height: 24px;
                      fill: white;
                      transition: transform 0.3s ease;
                  }

                  .chat-button.active svg {
                      transform: rotate(180deg);
                  }

                  .chat-panel {
                      position: fixed;
                      bottom: 88px;
                      right: 24px;
                      width: 360px;
                      height: 520px;
                      background: #ffffff;
                      border-radius: 28px;
                      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
                      transform: translateY(100%) scale(0.95);
                      opacity: 0;
                      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                      z-index: 999;
                      display: flex;
                      flex-direction: column;
                      overflow: hidden;
                      border: 1px solid #e8eaf6;
                  }

                  .chat-panel.active {
                      transform: translateY(0) scale(1);
                      opacity: 1;
                  }

                  .chat-header {
                      background: linear-gradient(135deg, #3f51b5 0%, #5c6bc0 100%);
                      color: white;
                      padding: 24px;
                      text-align: center;
                      position: relative;
                      display: flex;
                      flex-direction: column;
                      align-items: center;
                      gap: 8px;
                  }

                  .chat-header h3 {
                      margin: 0;
                      font-size: 20px;
                      font-weight: 500;
                      letter-spacing: 0.1px;
                  }

                  .chat-header p {
                      margin: 0;
                      opacity: 0.9;
                      font-size: 14px;
                      font-weight: 400;
                  }

                  .remember-toggle {
                      display: flex;
                      align-items: center;
                      gap: 8px;
                      margin-top: 4px;
                  }

                  .toggle-switch {
                      position: relative;
                      width: 44px;
                      height: 24px;
                      background: rgba(255, 255, 255, 0.3);
                      border-radius: 12px;
                      cursor: pointer;
                      transition: background-color 0.3s ease;
                  }

                  .toggle-switch.active {
                      background: #4caf50;
                  }

                  .toggle-slider {
                      position: absolute;
                      top: 2px;
                      left: 2px;
                      width: 20px;
                      height: 20px;
                      background: white;
                      border-radius: 50%;
                      transition: transform 0.3s ease;
                      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
                  }

                  .toggle-switch.active .toggle-slider {
                      transform: translateX(20px);
                  }

                  .toggle-label {
                      font-size: 12px;
                      opacity: 0.9;
                      font-weight: 400;
                  }

                  .loading-indicator {
                      display: none;
                      align-items: center;
                      gap: 8px;
                      padding: 8px 12px;
                      background: rgba(76, 175, 80, 0.1);
                      border-radius: 16px;
                      margin: 8px 16px;
                      font-size: 12px;
                      color: #4caf50;
                  }

                  .loading-indicator.active {
                      display: flex;
                  }

                  .loading-spinner {
                      width: 16px;
                      height: 16px;
                      border: 2px solid rgba(76, 175, 80, 0.3);
                      border-top: 2px solid #4caf50;
                      border-radius: 50%;
                      animation: spin 1s linear infinite;
                  }

                  @keyframes spin {
                      0% { transform: rotate(0deg); }
                      100% { transform: rotate(360deg); }
                  }

                  .error-message {
                      background: rgba(244, 67, 54, 0.1);
                      color: #d32f2f;
                      padding: 8px 12px;
                      border-radius: 16px;
                      margin: 8px 16px;
                      font-size: 12px;
                      border-left: 3px solid #f44336;
                  }

                  .chat-messages {
                      flex: 1;
                      padding: 16px;
                      overflow-y: auto;
                      background: #fafafa;
                      user-select: text;
                      -webkit-user-select: text;
                      -moz-user-select: text;
                      -ms-user-select: text;
                  }

                  .message {
                      margin-bottom: 16px;
                      display: flex;
                      align-items: flex-start;
                      animation: slideIn 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                  }

                  .message.user {
                      flex-direction: row-reverse;
                  }

                  .message-bubble {
                      max-width: 75%;
                      padding: 12px 16px;
                      border-radius: 20px;
                      font-size: 14px;
                      line-height: 1.5;
                      word-wrap: break-word;
                      user-select: text;
                      -webkit-user-select: text;
                      -moz-user-select: text;
                      -ms-user-select: text;
                      cursor: text;
                      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
                  }

                  .message.ai .message-bubble {
                      background: #ffffff;
                      color: #1a1c2e;
                      border-bottom-left-radius: 8px;
                      border: 1px solid #e0e0e0;
                  }

                  .message.user .message-bubble {
                      background: #4caf50;
                      color: white;
                      border-bottom-right-radius: 8px;
                  }

                  .message-avatar {
                      width: 36px;
                      height: 36px;
                      border-radius: 18px;
                      margin: 0 12px 0 0;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      font-size: 12px;
                      font-weight: 500;
                      flex-shrink: 0;
                  }

                  .message.user .message-avatar {
                      margin: 0 0 0 12px;
                  }

                  .message.ai .message-avatar {
                      background: linear-gradient(135deg, #3f51b5, #5c6bc0);
                      color: white;
                  }

                  .message.user .message-avatar {
                      background: #e8eaf6;
                      color: #3f51b5;
                  }

                  .chat-input {
                      padding: 16px;
                      background: white;
                      border-top: 1px solid #e0e0e0;
                      display: flex;
                      gap: 12px;
                      align-items: center;
                  }

                  .chat-input.disabled input {
                      background-color: #f5f5f5;
                      color: #9e9e9e;
                      cursor: not-allowed;
                  }

                  .chat-input.disabled .send-button {
                      background: #e0e0e0;
                      cursor: not-allowed;
                      transform: none;
                  }

                  .chat-input.disabled .send-button:hover {
                      background: #e0e0e0;
                      transform: none;
                      box-shadow: none;
                  }

                  .chat-input input {
                      flex: 1;
                      padding: 14px 20px;
                      border: 2px solid #e0e0e0;
                      border-radius: 28px;
                      outline: none;
                      font-size: 14px;
                      transition: all 0.3s ease;
                      background: #fafafa;
                      font-family: inherit;
                  }

                  .chat-input input:focus {
                      border-color: #4caf50;
                      background: white;
                      box-shadow: 0 0 0 4px rgba(76, 175, 80, 0.1);
                  }

                  .send-button {
                      width: 48px;
                      height: 48px;
                      background: #4caf50;
                      border: none;
                      border-radius: 24px;
                      cursor: pointer;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                      box-shadow: 0 2px 8px rgba(76, 175, 80, 0.3);
                  }

                  .send-button:hover {
                      transform: scale(1.05);
                      background: #66bb6a;
                      box-shadow: 0 4px 12px rgba(76, 175, 80, 0.4);
                  }

                  .send-button:active {
                      transform: scale(0.95);
                  }

                  .send-button svg {
                      width: 20px;
                      height: 20px;
                      fill: white;
                  }

                  .typing-indicator {
                      display: none;
                      padding: 12px 16px;
                      color: #757575;
                      font-size: 14px;
                      font-style: italic;
                  }

                  .typing-indicator.active {
                      display: block;
                  }

                  .typing-dots {
                      display: inline-block;
                      margin-left: 8px;
                  }

                  .typing-dots span {
                      display: inline-block;
                      width: 4px;
                      height: 4px;
                      background: #757575;
                      border-radius: 50%;
                      margin: 0 2px;
                      animation: typing 1.4s infinite ease-in-out;
                  }

                  .typing-dots span:nth-child(1) { animation-delay: -0.32s; }
                  .typing-dots span:nth-child(2) { animation-delay: -0.16s; }

                  @keyframes typing {
                      0%, 80%, 100% { 
                          transform: scale(0.8); 
                          opacity: 0.5; 
                      }
                      40% { 
                          transform: scale(1); 
                          opacity: 1; 
                      }
                  }

                  @keyframes slideIn {
                      from {
                          opacity: 0;
                          transform: translateY(16px);
                      }
                      to {
                          opacity: 1;
                          transform: translateY(0);
                      }
                  }

                  /* Custom scrollbar */
                  .chat-messages::-webkit-scrollbar {
                      width: 6px;
                  }

                  .chat-messages::-webkit-scrollbar-track {
                      background: transparent;
                  }

                  .chat-messages::-webkit-scrollbar-thumb {
                      background: #c0c0c0;
                      border-radius: 3px;
                  }

                  .chat-messages::-webkit-scrollbar-thumb:hover {
                      background: #a0a0a0;
                  }

                  @media (max-width: 480px) {
                      .chat-panel {
                          width: calc(100vw - 32px);
                          right: 16px;
                          height: 70vh;
                          border-radius: 20px;
                      }
                      
                      .chat-button {
                          bottom: 16px;
                          right: 16px;
                          width: 56px;
                          height: 56px;
                      }
                  }
              </style>
              
              <div style="position: fixed; bottom: 0; right: 0">
                  <!-- Chat Button -->
                  <button class="chat-button" id="chatButton">
                      <svg viewBox="0 0 24 24">
                          <path d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4l4 4 4-4h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"/>
                      </svg>
                  </button>

                  <!-- Chat Panel -->
                  <div class="chat-panel" id="chatPanel">
                      
                      <div class="loading-indicator" id="loadingIndicator">
                          <div class="loading-spinner"></div>
                          <span>Fetching AI response...</span>
                      </div>
                      
                      <div class="chat-messages" id="chatMessages">
                          <div class="message ai">
                              <div class="message-avatar">AI</div>
                              <div class="message-bubble">
                                  Digilog Ai,  here to help you explore, recommend, or clarify any product on our website. What can I assist you with today?
                              </div>
                          </div>
                      </div>
                      
                      <div class="typing-indicator" id="typingIndicator">
                          AI is typing
                          <div class="typing-dots">
                              <span></span>
                              <span></span>
                              <span></span>
                          </div>
                      </div>
                      
                      <div class="chat-input">
                          <input type="text" id="messageInput" placeholder="Type your message..." maxlength="500">
                          <button class="send-button" id="sendButton">
                              <svg viewBox="0 0 24 24">
                                  <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
                              </svg>
                          </button>
                      </div>
                  </div>
              </div>
          `;
          
          // Initialize your original AIChat class logic within the shadow DOM
          this.setupAIChat();
      }
      
      setupAIChat() {
          // Your original AIChat class, but adapted to work within Shadow DOM
          class AIChat {
              constructor(shadowRoot) {
                  // Configuration - same as your original
                  this.config = {
                      timeout: 30000,
                      maxRetries: 3,
                      retryDelay: 1000,
                      debounceDelay: 300,
                      apiEndpoint: '{{  block.settings.server_url }}',
                      maxConcurrentRequests: 2
                  };
                  
                  // DOM Elements - now from shadow root
                  this.chatButton = shadowRoot.getElementById('chatButton');
                  this.chatPanel = shadowRoot.getElementById('chatPanel');
                  this.chatMessages = shadowRoot.getElementById('chatMessages');
                  this.messageInput = shadowRoot.getElementById('messageInput');
                  this.sendButton = shadowRoot.getElementById('sendButton');
                  this.typingIndicator = shadowRoot.getElementById('typingIndicator');
                  this.loadingIndicator = shadowRoot.getElementById('loadingIndicator');
                  {% comment %} this.rememberToggle = shadowRoot.getElementById('rememberToggle'); {% endcomment %}
                  this.chatInput = shadowRoot.querySelector('.chat-input');
                  
                  // State Management - same as your original
                  this.isOpen = false;
                  this.isAITyping = false;
                  this.rememberMode =   {{ block.settings.is_remember | default: false }};
                  this.abortController = null;
                  this.requestQueue = [];
                  this.isProcessingRequest = false;
                  
                  // Cache for performance - same as your original
                  this.responseCache = new Map();
                  this.conversationHistory = [];
                  
                  this.init();
              }
              
              init() {
                  // Create debounced handler after config is available
                  this.handleSendMessage = this.debounce(() => {
                      this.sendMessage();
                  }, this.config.debounceDelay);
                  
                  this.chatButton.addEventListener('click', () => this.toggleChat());
                  this.sendButton.addEventListener('click', () => this.handleSendMessage());
                  {% comment %} this.rememberToggle.addEventListener('click', () => this.toggleRememberMode()); {% endcomment %}
                  
                  this.messageInput.addEventListener('keypress', (e) => {
                      if (e.key === 'Enter' && !this.isAITyping) {
                          this.handleSendMessage();
                      }
                  });
                  
                  // Auto-focus input when panel opens
                  this.chatPanel.addEventListener('transitionend', () => {
                      if (this.isOpen && !this.isAITyping) {
                          this.messageInput.focus();
                      }
                  });
                  
                  // Cleanup on page unload
                  window.addEventListener('beforeunload', () => this.cleanup());
              }
              
              toggleRememberMode() {
                  this.rememberMode = !this.rememberMode;
                  {% comment %} this.rememberToggle.classList.toggle('active', this.rememberMode); {% endcomment %}
                  
                  // Show feedback
                  const mode = this.rememberMode ? 'enabled' : 'disabled';
                  this.addSystemMessage(`Remember Mode ${mode}. ${this.rememberMode ? 'I will now remember our conversation context.' : 'Conversation context will not be saved.'}`);
              }
              
              renderMarkdown(text) {
                  if (!text) return '';
                  
                  // Replace line breaks
                  let formatted = text.replace(/\n\n/g, '<br><br>').replace(/\n/g, '<br>');
                  
                  // Replace bold text: **text** or __text__
                  formatted = formatted.replace(/\*\*(.*?)\*\*|__(.*?)__/g, '<strong>$1$2</strong>');
                  
                  // Replace italic text: *text* or _text_
                  formatted = formatted.replace(/\*(.*?)\*|_(.*?)_/g, '<em>$1$2</em>');
                  
                  // Replace numbered lists: 1. text
                  formatted = formatted.replace(/^\d+\.\s+(.*?)(?:\n|$)/gm, '<li>$1</li>');
                  
                  // Replace bullet lists: - text or * text
                  formatted = formatted.replace(/^[\-\*]\s+(.*?)(?:\n|$)/gm, '<li>$1</li>');
                  
                  // Wrap adjacent list items in <ul> or <ol>
                  formatted = formatted.replace(/<li>.*?<\/li>(?:\s*<li>.*?<\/li>)+/g, match => {
                      if (match.startsWith('<li>1.') || match.startsWith('<li>2.')) {
                          return '<ol>' + match + '</ol>';
                      } else {
                          return '<ul>' + match + '</ul>';
                      }
                  });
                  
                  return formatted;
              }

              addSystemMessage(text) {
                  const messageDiv = document.createElement('div');
                  messageDiv.className = 'message ai';
                  messageDiv.style.opacity = '0.8';
                  
                  const avatar = document.createElement('div');
                  avatar.className = 'message-avatar';
                  avatar.textContent = '⚙️';
                  avatar.style.fontSize = '16px';
                  
                  const bubble = document.createElement('div');
                  bubble.className = 'message-bubble';
                  bubble.style.fontStyle = 'italic';
                  bubble.style.fontSize = '13px';
                  bubble.textContent = text;
                  
                  messageDiv.appendChild(avatar);
                  messageDiv.appendChild(bubble);
                  
                  this.chatMessages.appendChild(messageDiv);
                  this.scrollToBottom();
              }
              
              toggleChat() {
                  this.isOpen = !this.isOpen;
                  this.chatPanel.classList.toggle('active', this.isOpen);
                  this.chatButton.classList.toggle('active', this.isOpen);
                  
                  if (this.isOpen) {
                      setTimeout(() => this.messageInput.focus(), 400);
                  }
              }
              
              async sendMessage() {
                  const message = this.messageInput.value.trim();
                  if (!message || this.isAITyping) return;
                  
                  this.addMessage(message, 'user');
                  this.messageInput.value = '';
                  
                  // Add to conversation history if remember mode is on
                  if (this.rememberMode) {
                      this.conversationHistory.push({ role: 'user', content: message });
                  }
                  
                  // Disable input while AI is processing
                  this.setInputDisabled(true);
                  this.showLoading();
                  
                  try {
                      const response = await this.getAIResponse(message);
                      this.hideLoading();
                      this.addMessage(response, 'ai');
                      
                      // Add AI response to history if remember mode is on
                      if (this.rememberMode) {
                          this.conversationHistory.push({ role: 'assistant', content: response });
                      }
                  } catch (error) {
                      this.hideLoading();
                      this.handleError(error);
                  } finally {
                      this.setInputDisabled(false);
                  }
              }
              
              async getAIResponse(message) {
                  // Check cache first for performance
                  const cacheKey = this.rememberMode ? 
                      `${message}_${JSON.stringify(this.conversationHistory)}` : 
                      message;
                  
                  if (this.responseCache.has(cacheKey)) {
                      // Simulate network delay for cached responses
                      await this.delay(500 + Math.random() * 1000);
                      return this.responseCache.get(cacheKey);
                  }
                  
                  // Cancel any previous request
                  if (this.abortController) {
                      this.abortController.abort();
                  }
                  
                  this.abortController = new AbortController();
                  
                  const requestData = {
                      message: message,
                  };
                  
                  const response = await this.makeRequest(requestData);
                  console.log(`AI response: ${response}`);
                  
                  // Cache the response
                  this.responseCache.set(cacheKey, response);
                  
                  // Limit cache size for memory management
                  if (this.responseCache.size > 100) {
                      const firstKey = this.responseCache.keys().next().value;
                      this.responseCache.delete(firstKey);
                  }
                  
                  return response;
              }
              
              async makeRequest(data, retryCount = 0) {
                  try {
                      console.log(`Sending request with data: ${JSON.stringify(data)}`);
                      console.log(`Value of Conversation History: ${JSON.stringify(this.conversationHistory)}`);
                      
                      const response = await fetch(this.config.apiEndpoint, {
                          method: 'POST',
                          headers: {
                              'Content-Type': 'application/json',
                              'X-Requested-With': 'XMLHttpRequest'
                          },
                          body: JSON.stringify(data)
                      });
                      
                      if (!response.ok) {
                          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                      }
                      
                      const result = await response.json();
                      console.log(`Received raw response: ${JSON.stringify(result)}`);
                      
                      if (result.reply == '') {
                          throw new Error(result.error || 'Unknown server error');
                      }
                      
                      return result.reply;
                      
                  } catch (error) {
                      if (error.name === 'AbortError') {
                          throw new Error('Request was cancelled');
                      }
                      
                      if (error.message === 'Request timeout') {
                          throw new Error('Server response timeout (30s)');
                      }
                      
                      // Retry logic for network errors
                      if (retryCount < this.config.maxRetries && this.isRetryableError(error)) {
                          await this.delay(this.config.retryDelay * Math.pow(2, retryCount));
                          return this.makeRequest(data, retryCount + 1);
                      }
                      
                      throw error;
                  }
              }

              isRetryableError(error) {
                  const retryableErrors = [
                      'NetworkError',
                      'TypeError',
                      'Failed to fetch'
                  ];
                  return retryableErrors.some(errorType => 
                      error.message.includes(errorType) || error.name === errorType
                  );
              }
              
              showLoading() {
                  this.loadingIndicator.classList.add('active');
                  this.scrollToBottom();
              }
              
              hideLoading() {
                  this.loadingIndicator.classList.remove('active');
              }
              
              handleError(error) {
                  const errorDiv = document.createElement('div');
                  errorDiv.className = 'error-message';
                  errorDiv.textContent = `Error: ${error.message}`;
                  this.chatMessages.appendChild(errorDiv);
                  this.scrollToBottom();
                  
                  // Auto-remove error message after 5 seconds
                  setTimeout(() => {
                      if (errorDiv.parentNode) {
                          errorDiv.remove();
                      }
                  }, 5000);
              }
              
              // Utility functions
              debounce(func, wait) {
                  let timeout;
                  return function executedFunction(...args) {
                      const later = () => {
                          clearTimeout(timeout);
                          func(...args);
                      };
                      clearTimeout(timeout);
                      timeout = setTimeout(later, wait);
                  };
              }
              
              delay(ms) {
                  return new Promise(resolve => setTimeout(resolve, ms));
              }
              
              getSessionId() {
                  if (!this.sessionId) {
                      this.sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
                  }
                  return this.sessionId;
              }
              
              cleanup() {
                  if (this.abortController) {
                      this.abortController.abort();
                  }
                  this.responseCache.clear();
                  this.conversationHistory = [];
              }
              
              addMessage(text, sender) {
                  const messageDiv = document.createElement('div');
                  messageDiv.className = `message ${sender}`;
                  
                  const avatar = document.createElement('div');
                  avatar.className = 'message-avatar';
                  avatar.textContent = sender === 'user' ? 'YOU' : 'AI';
                  
                  const bubble = document.createElement('div');
                  bubble.className = 'message-bubble';
                  
                  if (sender === 'ai') {
                      bubble.innerHTML = this.renderMarkdown(text);
                  } else {
                      bubble.textContent = text;
                  }
                  
                  messageDiv.appendChild(avatar);
                  messageDiv.appendChild(bubble);
                  
                  this.chatMessages.appendChild(messageDiv);
                  this.scrollToBottom();
              }
              
              setInputDisabled(disabled) {
                  this.isAITyping = disabled;
                  this.messageInput.disabled = disabled;
                  this.sendButton.disabled = disabled;
                  
                  if (disabled) {
                      this.chatInput.classList.add('disabled');
                      this.messageInput.placeholder = 'AI is typing...';
                  } else {
                      this.chatInput.classList.remove('disabled');
                      this.messageInput.placeholder = 'Type your message...';
                      this.messageInput.focus();
                  }
              }
              
              showTyping() {
                  this.typingIndicator.classList.add('active');
                  this.scrollToBottom();
              }
              
              hideTyping() {
                  this.typingIndicator.classList.remove('active');
              }
              
              scrollToBottom() {
                  setTimeout(() => {
                      this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
                  }, 100);
              }
          }
          
          // Initialize your AIChat within the shadow DOM
          this.aiChat = new AIChat(this.shadowRoot);
          
          // Expose public methods for external access
          this.openChat = () => this.aiChat.toggleChat();
          this.closeChat = () => {
              if (this.aiChat.isOpen) {
                  this.aiChat.toggleChat();
              }
          };
          this.sendExternalMessage = (message) => {
              this.aiChat.addMessage(message, 'user');
              this.aiChat.getAIResponse(message);
          };
      }
  }
    
  // Register the custom element
  if (!customElements.get('isolated-ai-chat')) {
      customElements.define('isolated-ai-chat', IsolatedAIChat);
  }
  
  // Auto-initialize when DOM is ready
  function initWidget() {
      if (document.querySelector('isolated-ai-chat')) {
          return;
      }
      
      const widget = document.createElement('isolated-ai-chat');
      document.body.appendChild(widget);
      
      // Expose widget to global scope for external access
      window.IsolatedAIChat = {
          instance: widget,
          open: () => widget.openChat(),
          close: () => widget.closeChat(),
          sendMessage: (message) => widget.sendExternalMessage(message)
      };
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initWidget);
  } else {
      initWidget();
  }
</script>



{% schema %}
{
  "name": "ChatBot Button",
  "target": "body",
  "settings": [
    {
      "type": "url",
      "id": "server_url",
      "label": "Server Link"
    },
    {
      "type": "url",
      "id": "mcp_link",
      "label": "MCP URL"
    },
    {
      "type": "checkbox",
      "id": "is_remember",
      "label": "Remembers Context",
      "default": true
    },
    {
      "type": "range",
      "id": "temperature",
      "min": 0,
      "max": 2,
      "step": 0.1,
      "unit": "tmp",
      "label": "Model Temperature",
      "default": 1
    }
  ]
}
{% endschema %}

